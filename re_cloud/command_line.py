from doctest import REPORT_ONLY_FIRST_FAILURE
import click
import os
import logging
from re_cloud.upload import upload_files, UploadType
from re_cloud.tracking import anonymous_tracking
from re_cloud.utils import get_project_root, safe_load
from re_cloud.constants import UploadTypes
from re_cloud import utils
import subprocess
import os
from re_cloud.render import render_markdown, render_pdf, render_csv

logger = logging.getLogger(__name__)

def get_project_dict(project_root):
    project_root = os.path.normpath(project_root)
    project_yaml_filepath = os.path.join(project_root, "dbt_project.yml")

    # get the project.yml contents
    if not os.path.lexists(project_yaml_filepath):
        raise click.ClickException(
            "no dbt_project.yml found at expected path {}".format(project_yaml_filepath)
        )

    with open(project_yaml_filepath, "rb") as handle:
        contents = handle.read().decode("utf-8")

    project_dict = safe_load(contents)

    if not isinstance(project_dict, dict):
        raise click.ClickException("dbt_project.yml does not parse to a dictionary")
    
    return project_dict


def get_target_paths(kwargs, re_data_target_dir=None):
    project_root = get_project_root(kwargs)
    project_dict = get_project_dict(project_root)
    dbt_target_path = os.path.abspath(project_dict['target-path'])

    if re_data_target_dir:
        re_data_target_path = os.path.abspath(re_data_target_dir)
    else:
        re_data_target_path = os.path.join(dbt_target_path, 're_data')

    return dbt_target_path, re_data_target_path


def add_options(options):
    def _add_options(func):
        for option in reversed(options):
            func = option(func)
        return func
    return _add_options

dbt_project_dir_option = click.option(
    '--project-dir',
    type=click.STRING,
    help="""
        Which directory to look in for the dbt_project.yml
        file. Default is the current working directory and its
        parents
    """
)

channel_name_or_id_option = click.option(
    '--channel-name-or-id',
    type=click.STRING,
    help="""
        The slack channel name to send the report uploaded message if a slack account is connected
        to the re_cloud account. It could be a channel name, channel id or member id.
    """
)

name_option = click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)

config_dir = click.option(
    '--config-dir',
    type=click.STRING,
    help="""
        Path to the directory containing re_data.yml config file
    """
)

file_option = click.option(
    '--file',
    type=click.STRING,
    help="""
        a file with give upload type
    """,
    required=True
)

standard_options = [
    channel_name_or_id_option,
    name_option,
    config_dir,
]

standard_with_file_name = standard_options + [file_option]

@click.group(help=f"re_cloud CLI")
def main():
    pass


@click.group(help=f"Upload artefacts to re_cloud for static hosting")
def upload():
    pass


@click.option(
    '--re-data-target-dir',
    type=click.STRING,
    help="""
        Which directory to store artefacts generated by re_data
        Defaults to the 'target-path' used in dbt_project.yml
    """
)
@upload.command()
@anonymous_tracking
@add_options(standard_options)
@add_options([dbt_project_dir_option])
def re_data(re_data_target_dir, **kwargs):
    _, serve_dir = get_target_paths(kwargs=kwargs, re_data_target_dir=re_data_target_dir)
    dir_path = serve_dir + '/'
    file_paths = utils.get_files_by_type(dir_path, UploadTypes.RE_DATA_OVERVIEW.value)
    upload_files(UploadType.RE_DATA, dir_path, file_paths, **kwargs)

@upload.command()
@anonymous_tracking
@add_options(standard_options)
@add_options([dbt_project_dir_option])
def dbt_docs(**kwargs):
    dbt_target_path, _ = get_target_paths(kwargs=kwargs)
    dir_path = dbt_target_path + '/'
    file_paths = utils.get_files_by_type(dir_path, UploadTypes.DBT_DOCS.value)
    upload_files(UploadType.DBT, dir_path, file_paths=file_paths, **kwargs)


@click.option(
    '--report-file',
    type=click.STRING,
    help="""
        Pandas profiling file with html report
    """,
    required=True
)
@upload.command()
@anonymous_tracking
@add_options(standard_options)
def pandas_profiling(report_file, **kwargs):
    upload_files(UploadType.PANDAS_PROFILING, None, file_paths=[report_file], **kwargs)


@upload.command()
@anonymous_tracking
@add_options(standard_options)
@click.option(
    '--path',
    type=click.STRING,
    help="""
        path to the directory containing or files to push to re_cloud
    """,
    required=False
)
def great_expectations(path, **kwargs):
    cwd = os.getcwd()
    main_dir = path if path else cwd

    dir_path = f'{main_dir}/uncommitted/data_docs/local_site/'
    file_paths = utils.get_all_files_in_dir(dir_path)

    upload_files(UploadType.GREAT_EXPECTATIONS, dir_path, file_paths=file_paths, **kwargs)

@upload.command()
@anonymous_tracking
@add_options(standard_with_file_name)
def jupyter_notebook(file, **kwargs):
    command_list = ['jupyter', 'nbconvert', '--to', 'html', file]
    notebook_html_file = file.replace('.ipynb', '.html')

    completed_process = subprocess.run(command_list)
    completed_process.check_returncode()
    upload_files(UploadType.JUPYTER_NOTEBOOK, None, file_paths=[notebook_html_file], **kwargs)


@upload.command()
@anonymous_tracking
@add_options(standard_with_file_name)
def html_file(file, **kwargs):
    upload_files(UploadType.HTML_FILE, None, file_paths=[file], **kwargs)


@upload.command()
@anonymous_tracking
@add_options(standard_with_file_name)
def markdown(file, **kwargs):
    if file.endswith('.md'):
        rendered_path = render_markdown(file)
        upload_files(UploadType.MARKDOWN, None, file_paths=[rendered_path], **kwargs)
    else:
        raise click.ClickException(f"File {file} is not a markdown file")

@upload.command()
@anonymous_tracking
@click.option(
    '--path',
    type=click.STRING,
    help="""
        path to the directory containing or files to push to re_cloud
    """,
)
@add_options(standard_with_file_name)
def html_dir(path, **kwargs):
    if os.path.isdir(path):
        all_files = utils.get_all_files_in_dir(path)
        upload_files(UploadType.HTML_DIR, path, file_paths=all_files, **kwargs)
    else:
        raise click.ClickException(f"Path {path} is not a directory")


main.add_command(upload)